// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StoreApp.Models;

namespace StoreApp.Migrations
{
    [DbContext(typeof(StoreContext))]
    [Migration("20220221201449_cart")]
    partial class cart
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("StoreApp.Models.Cart", b =>
                {
                    b.Property<long>("CartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductID")
                        .HasColumnType("bigint");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.HasKey("CartID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserID");

                    b.ToTable("CartTbl");
                });

            modelBuilder.Entity("StoreApp.Models.Category", b =>
                {
                    b.Property<long>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MainCategoryID")
                        .HasColumnType("bigint");

                    b.HasKey("CategoryID");

                    b.HasIndex("MainCategoryID");

                    b.ToTable("CategoryTbl");
                });

            modelBuilder.Entity("StoreApp.Models.DispatchAgency", b =>
                {
                    b.Property<long>("DispatchAgencyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DispatchAgencyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DispatchAgencyID");

                    b.ToTable("DispatchAgencyTbl");
                });

            modelBuilder.Entity("StoreApp.Models.MainCategory", b =>
                {
                    b.Property<long>("MainCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("MainCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MainCategoryID");

                    b.ToTable("MainCategoryTbl");
                });

            modelBuilder.Entity("StoreApp.Models.Product", b =>
                {
                    b.Property<long>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CategoryID")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProdDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserOrderID")
                        .HasColumnType("bigint");

                    b.Property<string>("photopath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("UserOrderID");

                    b.ToTable("ProductTbl");
                });

            modelBuilder.Entity("StoreApp.Models.Store", b =>
                {
                    b.Property<long>("StoreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StoreID");

                    b.ToTable("StoreTbl");
                });

            modelBuilder.Entity("StoreApp.Models.User", b =>
                {
                    b.Property<long>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("UserTbl");
                });

            modelBuilder.Entity("StoreApp.Models.UserOrder", b =>
                {
                    b.Property<long>("UserOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.HasKey("UserOrderID");

                    b.HasIndex("UserID");

                    b.ToTable("UserOrderTbl");
                });

            modelBuilder.Entity("StoreApp.Models.UserOrderDetails", b =>
                {
                    b.Property<long>("UserOrderDetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductID")
                        .HasColumnType("bigint");

                    b.Property<long>("Qty")
                        .HasColumnType("bigint");

                    b.Property<long>("UserOrderID")
                        .HasColumnType("bigint");

                    b.HasKey("UserOrderDetID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserOrderID");

                    b.ToTable("UserOrderDetailsTbl");
                });

            modelBuilder.Entity("StoreApp.Models.UserOrderDispatch", b =>
                {
                    b.Property<long>("UserOrderDispatchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("DispatchAgencyID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DispatchDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("DocketNo")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ExpectedReachDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserOrderID")
                        .HasColumnType("bigint");

                    b.HasKey("UserOrderDispatchID");

                    b.HasIndex("DispatchAgencyID");

                    b.HasIndex("UserOrderID");

                    b.ToTable("UserOrderDispatchTbl");
                });

            modelBuilder.Entity("StoreApp.Models.Cart", b =>
                {
                    b.HasOne("StoreApp.Models.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreApp.Models.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StoreApp.Models.Category", b =>
                {
                    b.HasOne("StoreApp.Models.MainCategory", "MainCategory")
                        .WithMany("Categories")
                        .HasForeignKey("MainCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("StoreApp.Models.Product", b =>
                {
                    b.HasOne("StoreApp.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreApp.Models.UserOrder", null)
                        .WithMany("Products")
                        .HasForeignKey("UserOrderID");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("StoreApp.Models.UserOrder", b =>
                {
                    b.HasOne("StoreApp.Models.User", "User")
                        .WithMany("UserOrders")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StoreApp.Models.UserOrderDetails", b =>
                {
                    b.HasOne("StoreApp.Models.Product", "Product")
                        .WithMany("UserOrderDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreApp.Models.UserOrder", "UserOrder")
                        .WithMany()
                        .HasForeignKey("UserOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("UserOrder");
                });

            modelBuilder.Entity("StoreApp.Models.UserOrderDispatch", b =>
                {
                    b.HasOne("StoreApp.Models.DispatchAgency", "DispatchAgency")
                        .WithMany("UserOrderDispatches")
                        .HasForeignKey("DispatchAgencyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreApp.Models.UserOrder", "UserOrder")
                        .WithMany("UserOrderDispatches")
                        .HasForeignKey("UserOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DispatchAgency");

                    b.Navigation("UserOrder");
                });

            modelBuilder.Entity("StoreApp.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("StoreApp.Models.DispatchAgency", b =>
                {
                    b.Navigation("UserOrderDispatches");
                });

            modelBuilder.Entity("StoreApp.Models.MainCategory", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("StoreApp.Models.Product", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("UserOrderDetails");
                });

            modelBuilder.Entity("StoreApp.Models.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("UserOrders");
                });

            modelBuilder.Entity("StoreApp.Models.UserOrder", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("UserOrderDispatches");
                });
#pragma warning restore 612, 618
        }
    }
}
